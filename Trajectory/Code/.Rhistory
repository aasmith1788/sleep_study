ols_test_breusch_pagan(reg.fit) # Breusch Pagan Test; significant = hetero
# 2.2 Normality of residuals
ols_plot_resid_hist(reg.fit)
ols_plot_resid_qq(reg.fit)
ks.test(reg.fit$residuals, "pnorm") #significant = not normally distributed
# Skewness and kurtosis (moments)
skewness(reg.fit$residuals) # near 0 = normal
kurtosis(reg.fit$residuals) # near 3 = normal
# Significance test
agostino.test(reg.fit$residuals)
anscombe.test(reg.fit$residuals)
# 2.3 Linearity
pairs(daten.plot, pch=19, lower.panel = NULL) # pairwise scatterplots
raintest(reg.fit) # Rainbow test; significant = nonlinearity
# 2.4 Absence of strong multicollinearity
ols_vif_tol(reg.fit) #VIF above 10
# KAM2
reg.fit <- lm(kam2 ~ age + sex + bmi + ts_kn_dicho2, data = data1)
confind <- 0.95
digit <- 2
daten.plot <- data.frame (kam2, age, sex, bmi, ts_kn_dicho2)
# 2.1 Homoscedasticity
ols_plot_resid_fit(reg.fit) # graphical test
ols_test_breusch_pagan(reg.fit) # Breusch Pagan Test; significant = hetero
# 2.2 Normality of residuals
ols_plot_resid_hist(reg.fit)
ols_plot_resid_qq(reg.fit)
ks.test(reg.fit$residuals, "pnorm") #significant = not normally distributed
# Skewness and kurtosis (moments)
skewness(reg.fit$residuals) # near 0 = normal
kurtosis(reg.fit$residuals) # near 3 = normal
# Significance test
agostino.test(reg.fit$residuals)
anscombe.test(reg.fit$residuals)
# 2.3 Linearity
pairs(daten.plot, pch=19, lower.panel = NULL) # pairwise scatterplots
raintest(reg.fit) # Rainbow test; significant = nonlinearity
# 2.4 Absence of strong multicollinearity
ols_vif_tol(reg.fit) #VIF above 10
# kam1_impulse
reg.fit <- lm(kam1_impulse ~ age + sex + bmi + ts_kn_dicho2, data = data1)
confind <- 0.95
digit <- 2
daten.plot <- data.frame (kam1_impulse, age, sex, bmi, ts_kn_dicho2)
par(mfrow=c(2,2))
plot(reg.fit, which=1:4)
# 2.1 Homoscedasticity
ols_plot_resid_fit(reg.fit) # graphical test
ols_test_breusch_pagan(reg.fit) # Breusch Pagan Test; significant = hetero
# 2.2 Normality of residuals
ols_plot_resid_hist(reg.fit)
ols_plot_resid_qq(reg.fit)
ks.test(reg.fit$residuals, "pnorm") #significant = not normally distributed
# Skewness and kurtosis (moments)
skewness(reg.fit$residuals) # near 0 = normal
kurtosis(reg.fit$residuals) # near 3 = normal
# Significance test
agostino.test(reg.fit$residuals)
anscombe.test(reg.fit$residuals)
# 2.3 Linearity
pairs(daten.plot, pch=19, lower.panel = NULL) # pairwise scatterplots
raintest(reg.fit) # Rainbow test; significant = nonlinearity
# 2.4 Absence of strong multicollinearity
ols_vif_tol(reg.fit) #VIF above 10
# kam2_impulse
reg.fit <- lm(kam2_impulse ~ age + sex + bmi + ts_kn_dicho2, data = data1)
confind <- 0.95
digit <- 2
daten.plot <- data.frame (kam2_impulse, age, sex, bmi, ts_kn_dicho2)
# 2.1 Homoscedasticity
ols_plot_resid_fit(reg.fit) # graphical test
ols_test_breusch_pagan(reg.fit) # Breusch Pagan Test; significant = hetero
# 2.2 Normality of residuals
ols_plot_resid_hist(reg.fit)
ols_plot_resid_qq(reg.fit)
ks.test(reg.fit$residuals, "pnorm") #significant = not normally distributed
# Skewness and kurtosis (moments)
skewness(reg.fit$residuals) # near 0 = normal
kurtosis(reg.fit$residuals) # near 3 = normal
# Significance test
agostino.test(reg.fit$residuals)
anscombe.test(reg.fit$residuals)
# 2.3 Linearity
pairs(daten.plot, pch=19, lower.panel = NULL) # pairwise scatterplots
raintest(reg.fit) # Rainbow test; significant = nonlinearity
# 2.4 Absence of strong multicollinearity
ols_vif_tol(reg.fit) #VIF above 10
# Testing assumptions for linear regression - TS WRIST ######################################
reg.fit <- lm(kam1 ~ age + sex + bmi + ts_wrs_dicho2, data = data1)
confind <- 0.95
digit <- 2
daten.plot <- data.frame (kam1, age, sex, bmi, ts_wrs_dicho2)
# 2.1 Homoscedasticity
ols_plot_resid_fit(reg.fit) # graphical test
ols_test_breusch_pagan(reg.fit) # Breusch Pagan Test; significant = hetero
# 2.2 Normality of residuals
ols_plot_resid_hist(reg.fit)
ols_plot_resid_qq(reg.fit)
shapiro.test(reg.fit$residuals) #significant = not normally distributed
# Skewness and kurtosis (moments)
skewness(reg.fit$residuals) # near 0 = normal
kurtosis(reg.fit$residuals) # near 3 = normal
# Significance test
agostino.test(reg.fit$residuals)
anscombe.test(reg.fit$residuals)
# 2.3 Linearity
pairs(daten.plot, pch=19, lower.panel = NULL) # pairwise scatterplots
raintest(reg.fit) # Rainbow test; significant = nonlinearity
# 2.4 Absence of strong multicollinearity
ols_vif_tol(reg.fit) #VIF above 10
library(dplyr)
library(ggpubr)
library(ggplot2)
library(grid)
library(gridExtra)
mepemg<-read.csv("R:/KumarLab3/PROJECTS/fNIRS/Stats/Dolinsky STUP-MEP/DataSet/fNIRS_MEP_STUP_epro_07102024.csv", header = TRUE, na.strings = "")
mepemg$sex <- as.factor(mepemg$sex)
mepemg<-read.csv("R:/KumarLab3/PROJECTS/fNIRS/Stats/STUP EMG-MEP/DataSet/fNIRS_MEP_STUP_epro_07102024.csv", header = TRUE, na.strings = "")
# MEP ---
mepemg$sex <- as.factor(mepemg$sex)
mepemg$stup_mep_post_dicho <-ifelse(is.na(mepemg$stup_mep_post), NA, ifelse(mepemg$stup_mep_post >=4, 1, 0)) # 0 = Less than 4
mepemg$stup_mep_post_dicho <- as.factor(mepemg$stup_mep_post_dicho)
table(mepemg$stup_mep_post_dicho)
mepemg$sct_time <- ifelse(is.na(mepemg$sct_2_time), NA, rowMeans(cbind(mepemg$sct_1_time, mepemg$sct_2_time), na.rm = TRUE))
# Functional Data ---
mepemg$sct_time <- ifelse(is.na(mepemg$sct_2_time)|is.na(mepemg$sct_1_time), NA, rowMeans(cbind(mepemg$sct_1_time, mepemg$sct_2_time), na.rm = TRUE))
mepemg$sct_time
library(dplyr)
library(ggplot2)
library(ggthemes)
# Import the data
outputDirFig <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Results/Figures"
####### DSIS
daily_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/dsis_daily.csv")
daily_data$dsis <- as.numeric(daily_data$dsis)
weekly_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/dsis_weekly.csv")
weekly_data$dsis <- as.numeric(weekly_data$dsis)
# Average DSIS
avg_dsis <- daily_data %>%
group_by(redcap_event_name) %>%
summarise(avg_dsis = mean(dsis, na.rm=TRUE),
sd_dsis = sd(dsis, na.rm = TRUE),
count = sum(!is.na(dsis)),
se_dsis = sd_dsis / sqrt(count),
ci_lower = avg_dsis - (1.96 * se_dsis),
ci_upper = avg_dsis + (1.96 * se_dsis))
library(dplyr)
library(ggplot2)
library(ggthemes)
# Import the data
outputDirFig <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Results/Figures"
####### DSIS
daily_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/dsis_daily.csv")
daily_data$dsis <- as.numeric(daily_data$dsis)
weekly_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/dsis_weekly.csv")
weekly_data$dsis <- as.numeric(weekly_data$dsis)
# Average DSIS
avg_dsis <- daily_data %>%
group_by(redcap_event_name) %>%
summarise(avg_dsis = mean(dsis, na.rm=TRUE),
sd_dsis = sd(dsis, na.rm = TRUE),
count = sum(!is.na(dsis)),
se_dsis = sd_dsis / sqrt(count),
ci_lower = avg_dsis - (1.96 * se_dsis),
ci_upper = avg_dsis + (1.96 * se_dsis))
avg_dsis
# Average DSIS
avg_dsis <- daily_data %>%
group_by(redcap_event_name) %>%
summarise(avg_dsis = mean(dsis, na.rm=TRUE),
sd_dsis = sd(dsis, na.rm = TRUE),
count = sum(!is.na(dsis)),
se_dsis = sd_dsis / sqrt(count),
ci_lower = avg_dsis - (1.96 * se_dsis),
ci_upper = avg_dsis + (1.96 * se_dsis),
n= n())
avg_dsis
ggplot(avg_dsis, aes(x = as.factor(redcap_event_name), y = avg_dsis)) +
geom_boxplot() +
labs(x = "Time (redcap_event_name)", y = "DSIS") +
theme_minimal()
avg_dsis$redcap_event_name
ggplot(avg_dsis, aes(x = avg_dsis)) +
geom_histogram(binwidth = 1, aes(fill = as.factor(redcap_event_name)), position = "identity", alpha = 0.4) +
labs(x = "DSIS", fill = "Time (redcap_event_name)") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(lcmm)
library(gbmt) # Group-Based Multivariate Trajectory Modeling
# library(mlogit) # multinomial logistic regression
outputDir <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Results"
gt9x_Efficiency <- gt9x_daily_data %>%
filter(!is.na(Efficiency),
day_from_first_ptvisit >= 0 & day_from_first_ptvisit <= 85)
lcmm(Efficiency_Mean ~ redcap_event_name ,random = ~ redcap_event_name, subject = "record_id",data = gt9x_Efficiency_Mean)
# GT9X
gt9x_daily_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/gt9x_sleep_daily.csv")
gt9x_weekly_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/gt9x_sleep_weekly.csv")
gt9x_Efficiency <- gt9x_daily_data %>%
filter(!is.na(Efficiency),
day_from_first_ptvisit >= 0 & day_from_first_ptvisit <= 85)
lcmm(Efficiency_Mean ~ redcap_event_name ,random = ~ redcap_event_name, subject = "record_id",data = gt9x_Efficiency)
lcmm(Efficiency_Mean ~ day_from_first_ptvisit ,random = ~ day_from_first_ptvisit, subject = "record_id",data = gt9x_Efficiency)
gt9x_Efficiency
lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", data = gt9x_Efficiency)
mlin <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", data = gt9x_Efficiency)
mlin$loglik
mbeta <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", link = 'beta, data = gt9x_Efficiency)
mbeta <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", link = 'beta', data = gt9x_Efficiency)
mbeta <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", link = 'beta', data = gt9x_Efficiency)
mspl <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", link = 'splines', data = gt9x_Efficiency)
mlin2 <- hlme(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", data = gt9x_Efficiency)
mspl5 <- lcmm(Efficiency ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", link = '5-quant-splines', data = gt9x_Efficiency)
summarytable(mlin, mbeta, mspl, mspl5q,which = c("loglik", "conv", "npm", "AIC"))
summarytable(mlin, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC")) # LOWER THE BETTER?
summarytable(mlin, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC", "SABIC")) # LOWER THE BETTER?
col <- rainbow(5)
plot(mlin, which="linkfunction", bty='l', ylab="Efficiency", col=col[1], lwd=2, xlab="underlying latent process")
plot(mbeta, which="linkfunction", add=TRUE, col=col[2], lwd=2)
plot(mspl, which="linkfunction", add=TRUE, col=col[3], lwd=2)
plot(mspl5, which="linkfunction", add=TRUE, col=col[4], lwd=2)
legend(x="topleft", legend=c("linear", "beta","splines (5equidistant)","splines (5 at quantiles)"), lty=1, col=col, bty="n", lwd=2)
col <- rainbow(1)
plot(mlin, which="linkfunction", bty='l', ylab="Efficiency", col=col[1], lwd=2, xlab="underlying latent process")
plot(mbeta, which="linkfunction", add=TRUE, col=col[2], lwd=2)
plot(mspl, which="linkfunction", add=TRUE, col=col[3], lwd=2)
plot(mspl5, which="linkfunction", add=TRUE, col=col[4], lwd=2)
legend(x="topleft", legend=c("linear", "beta","splines (5equidistant)","splines (5 at quantiles)"), lty=1, col=col, bty="n", lwd=2)
col <- rainbow(4)
plot(mlin, which="linkfunction", bty='l', ylab="Efficiency", col=col[1], lwd=2, xlab="underlying latent process")
plot(mbeta, which="linkfunction", add=TRUE, col=col[2], lwd=2)
plot(mspl, which="linkfunction", add=TRUE, col=col[3], lwd=2)
plot(mspl5, which="linkfunction", add=TRUE, col=col[4], lwd=2)
legend(x="topleft", legend=c("linear", "beta","splines (5equidistant)","splines (5 at quantiles)"), lty=1, col=col, bty="n", lwd=2)
col <- rainbow(5)
plot(mlin, which="linkfunction", bty='l', ylab="Efficiency", col=col[1], lwd=2, xlab="underlying latent process")
plot(mbeta, which="linkfunction", add=TRUE, col=col[2], lwd=2)
plot(mspl, which="linkfunction", add=TRUE, col=col[3], lwd=2)
plot(mspl5, which="linkfunction", add=TRUE, col=col[4], lwd=2)
legend(x="topleft", legend=c("linear", "beta","splines (5equidistant)","splines (5 at quantiles)"), lty=1, col=col, bty="n", lwd=2)
linkspl5q <- predictlink(mspl5q,ndraws=2000)
linkspl5q <- predictlink(mspl5,ndraws=2000)
plot(linkspl5q, col=col[4], lty=2, shades=TRUE)
legend(x="left", legend=c("95% confidence bands","for splines at quantiles"),lty=c(2,NA), col=c(col[4],NA), bty="n", lwd=1, cex=0.8)
setwd("R:/Scans/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Code")
setwd("R:/Scans/KumarLab3/PROJECTS/wesens/Data/Analysis/0-Primary/MA08/Code")
library(ggplot2)
library (dplyr)
library(tidyr)
library(ggpubr)
library(cowplot)
library(gridExtra)
for (i in seq_along(ax6_var)) {
ax6_col <- ax6_var[i]
# WALK6M BASELINE
common_ids <- Reduce(intersect, list(
walk6m_115_bl$record_id[!is.na(walk6m_115_bl[[ax6_col]])],
walk6m_130_bl$record_id[!is.na(walk6m_130_bl[[ax6_col]])]
))
# Filter dataframe
walk6m_115_bl_filtered <- walk6m_115_bl[walk6m_115_bl$record_id %in% common_ids, ]
walk6m_130_bl_filtered <- walk6m_130_bl[walk6m_130_bl$record_id %in% common_ids, ]
walk6m_115_bl_filtered <- walk6m_115_bl_filtered[order(walk6m_115_bl_filtered$record_id), ]
walk6m_130_bl_filtered <- walk6m_130_bl_filtered[order(walk6m_130_bl_filtered$record_id), ]
# GAIT28M BASELINE
common_ids_13 <- Reduce(intersect, list(
gait28m_115_bl$record_id[!is.na(gait28m_115_bl[[ax6_col]])],
gait28m_130_bl$record_id[!is.na(gait28m_130_bl[[ax6_col]])]
))
# Filter the dataframes
gait28m_115_bl_filtered <- gait28m_115_bl[gait28m_115_bl$record_id %in% common_ids_13, ]
gait28m_130_bl_filtered <- gait28m_130_bl[gait28m_130_bl$record_id %in% common_ids_13, ]
gait28m_115_bl_filtered <- gait28m_115_bl_filtered[order(gait28m_115_bl_filtered$record_id), ]
gait28m_130_bl_filtered <- gait28m_130_bl_filtered[order(gait28m_130_bl_filtered$record_id), ]
# home BASELINE
common_ids_13 <- Reduce(intersect, list(
home_115_bl$record_id[!is.na(home_115_bl[[ax6_col]])],
home_130_bl$record_id[!is.na(home_130_bl[[ax6_col]])]
))
# Filter the dataframes
home_115_bl_filtered <- home_115_bl[home_115_bl$record_id %in% common_ids_13, ]
home_130_bl_filtered <- home_130_bl[home_130_bl$record_id %in% common_ids_13, ]
home_115_bl_filtered <- home_115_bl_filtered[order(home_115_bl_filtered$record_id), ]
home_130_bl_filtered <- home_130_bl_filtered[order(home_130_bl_filtered$record_id), ]
### WALK6M
plot_df15 <- data.frame(record_id = walk6m_130_bl_filtered$record_id,
walk6m_115 = walk6m_115_bl_filtered[[ax6_col]],
walk6m_130 = walk6m_130_bl_filtered[[ax6_col]])
colnames(plot_df15) <- c("record_id", ax6_col, ax6_col)
setwd("R:/Scans/KumarLab3/PROJECTS/wesens/Data/Analysis/0-Primary/MA08/Code")
library(ggplot2)
library (dplyr)
library(tidyr)
library(ggpubr)
library(cowplot)
library(gridExtra)
library(dplyr)
library(ggplot2)
library(ggthemes)
# Import the data
outputDirFig <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Results/Figures"
##  IMPORT DATA
weekly_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/gt9x_sleep_dsis_koos_pgaoa_weekly.csv")
weekly_data$dsis <- as.numeric(weekly_data$dsis)
weekly_data0 <- weekly_data %>% filter (redcap_event_name == 0)
weekly_data12 <- weekly_data %>% filter (redcap_event_name == 12)
# GT9X SLEEP COL
sleep_col <- c("Efficiency_Mean", "tst_Mean", "waso_Mean", "Sleep_Fragmentation_Index_Mean")
gt9x_baseline <- weekly_data0 %>%
group_by(record_id) %>%
summarise(across(all_of(sleep_col), \(x) mean(x, na.rm = TRUE)))
# KOOS PGAOA
koos_col <- c("record_id", "redcap_event_name", "dsis", "koos_pain", "koos_adl","kd_womac_pain","kd_womac_stiff", "kd_womac_func", "pgaoa")
koos_baseline <- weekly_data0[, koos_col]
koos_baseline <- koos_baseline %>% distinct()
# BASLINE
BASELINE <- gt9x_baseline %>% left_join(koos_baseline, by = 'record_id') %>%
mutate(across(everything(), ~ replace(., . == ".", NA)))
#
weekly_data <- weekly_data %>% filter (redcap_event_name>0) %>% filter (redcap_event_name<=12)
koos_weekly <- weekly_data[, koos_col]
dsis_weekly <- rbind(koos_baseline, koos_weekly)
dsis_weekly <- dsis_weekly  %>%  mutate(across(everything(), ~ replace(., . == ".", NA)))
#
WEEK12 <- weekly_data12[, c(koos_col, sleep_col)]
WEEK12 <- WEEK12 %>% mutate(across(everything(), ~ replace(., . == ".", NA)))
#
library(dplyr)
library(ggplot2)
library(ggthemes)
#
library(ggplot2)
library(lcmm)
library(gbmt) # Group-Based Multivariate Trajectory Modeling
#####################################
outputDir <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Sleep Trajectory/Results"
###GT9X
gt9x_weekly_data <- weekly_data %>%
filter(redcap_event_name != "") %>%
filter(redcap_event_name != 0)
gt9x_weekly_data
View(gt9x_weekly_data)
# GT9X
gt9x_weekly_data <- weekly_data %>%
filter(redcap_event_name != "") %>%
filter(redcap_event_name != 0)
##### Efficiency Mean
Eff_col <- c('record_id', 'redcap_event_name', 'Efficiency_Mean')
gt9x_eff <- gt9x_weekly_data[, Eff_col]
gt9x_eff$redcap_event_name
gt9x_Efficiency_Mean <- gt9x_weekly_data %>% filter(!is.na(Efficiency_Mean))
View(gt9x_Efficiency_Mean)
gt9x_Efficiency_Mean <- gt9x_eff %>% filter(!is.na(Efficiency_Mean))
View(gt9x_Efficiency_Mean)
int_period <- 1:12
gt9x_Efficiency_Mean <- gt9x_eff %>%
filter(!is.na(Efficiency_Mean)) %>%
group_by(record_id) %>%
filter(all(c(1:12) %in% redcap_event_name) && all(!is.na(Efficiency_Mean))) %>%
ungroup()
table(gt9x_Efficiency_Mean$redcap_event_name)
outputDirFig <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Sleep Trajectory/Results/Figures"
# Import the data
outputDir <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Sleep Trajectory/Results"
#####################################
# GT9X
gt9x_weekly_data <- weekly_data %>%
filter(redcap_event_name != "") %>%
filter(redcap_event_name != 0)
library(dplyr)
library(ggplot2)
library(ggthemes)
#
library(ggplot2)
library(lcmm)
library(gbmt) # Group-Based Multivariate Trajectory Modeling
# library(mlogit) # multinomial logistic regression
# Import the data
outputDir <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Sleep Trajectory/Results"
outputDirFig <- "R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Sleep Trajectory/Results/Figures"
##  IMPORT DATA
weekly_data <- read.csv("R:/KumarLab3/PROJECTS/wesens/Data/Analysis/Kim_E/Pain Trajectory/Data/gt9x_sleep_dsis_koos_pgaoa_weekly.csv")
weekly_data$dsis <- as.numeric(weekly_data$dsis)
weekly_data0 <- weekly_data %>% filter (redcap_event_name == 0)
weekly_data12 <- weekly_data %>% filter (redcap_event_name == 12)
# GT9X SLEEP COL
sleep_col <- c("Efficiency_Mean", "tst_Mean", "waso_Mean", "Sleep_Fragmentation_Index_Mean")
gt9x_baseline <- weekly_data0 %>%
group_by(record_id) %>%
summarise(across(all_of(sleep_col), \(x) mean(x, na.rm = TRUE)))
# KOOS PGAOA
koos_col <- c("record_id", "redcap_event_name", "dsis", "koos_pain", "koos_adl","kd_womac_pain","kd_womac_stiff", "kd_womac_func", "pgaoa")
koos_baseline <- weekly_data0[, koos_col]
koos_baseline <- koos_baseline %>% distinct()
# BASLINE
BASELINE <- gt9x_baseline %>% left_join(koos_baseline, by = 'record_id') %>%
mutate(across(everything(), ~ replace(., . == ".", NA)))
#
weekly_data <- weekly_data %>% filter (redcap_event_name>0) %>% filter (redcap_event_name<=12)
koos_weekly <- weekly_data[, koos_col]
dsis_weekly <- rbind(koos_baseline, koos_weekly)
dsis_weekly <- dsis_weekly  %>%  mutate(across(everything(), ~ replace(., . == ".", NA)))
#
WEEK12 <- weekly_data12[, c(koos_col, sleep_col)]
WEEK12 <- WEEK12 %>% mutate(across(everything(), ~ replace(., . == ".", NA)))
Eff_col <- c('record_id', 'redcap_event_name', 'Efficiency_Mean')
gt9x_eff <- gt9x_weekly_data[, Eff_col]
gt9x_Efficiency_Mean <- gt9x_eff %>%
filter(!is.na(Efficiency_Mean)) %>%
group_by(record_id) %>%
filter(all(c(1:12) %in% redcap_event_name) && all(!is.na(Efficiency_Mean))) %>%
ungroup()
##### Efficiency Mean
Eff_col <- c('record_id', 'redcap_event_name', 'Efficiency_Mean')
gt9x_eff <- gt9x_weekly_data[, Eff_col]
gt9x_Efficiency <- gt9x_eff %>%
filter(!is.na(Efficiency_Mean)) %>%
group_by(record_id) %>%
filter(all(c(1:12) %in% redcap_event_name) && all(!is.na(Efficiency_Mean))) %>%
ungroup()
#
mlin <- lcmm(Efficiency_Mean ~ day_from_first_ptvisit , random = ~ day_from_first_ptvisit, subject = "record_id", data = gt9x_Efficiency)
#
mlin <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency)
mlin2 <- hlme(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency)
mbeta <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = 'beta', data = gt9x_Efficiency)
mspl <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = 'splines', data = gt9x_Efficiency)
mspl5 <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = '5-quant-splines', data = gt9x_Efficiency)
summarytable(mlin, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC", "SABIC")) # LOWER THE BETTER?
summarytable(mlin,mlin2, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC", "SABIC")) # LOWER THE BETTER
col <- rainbow(5)
plot(mlin, which="linkfunction", bty='l', ylab="Efficiency", col=col[1], lwd=2, xlab="underlying latent process")
plot(mbeta, which="linkfunction", add=TRUE, col=col[2], lwd=2)
plot(mspl, which="linkfunction", add=TRUE, col=col[3], lwd=2)
plot(mspl5, which="linkfunction", add=TRUE, col=col[4], lwd=2)
legend(x="topleft", legend=c("linear", "beta","splines (5equidistant)","splines (5 at quantiles)"), lty=1, col=col, bty="n", lwd=2)
linkspl5q <- predictlink(mspl5,ndraws=2000)
plot(linkspl5q, col=col[4], lty=2, shades=TRUE)
legend(x="left", legend=c("95% confidence bands","for splines at quantiles"),lty=c(2,NA), col=c(col[4],NA), bty="n", lwd=1, cex=0.8)
# Quadratic
f_mspl1 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", ng = 1, data = gt9x_Efficiency)
f_mspl2 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 2, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl3 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 3, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl4 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 4, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl5 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 5, B = f_mspl1, mixture = ~ redcap_event_name)
# f_linear6 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "linear", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency_Mean, ng = 6, B = f_linear1, mixture = ~ redcap_event_name)
# Compare models; AIC/BIC/SABIC (smaller, better fitting),
# entropy (>0.8, well-separated class), ICL1/2 (lower, better balance between model fit)
summarytable(f_mspl1, f_mspl2, f_mspl3,  f_mspl4,  f_mspl5,
which = c("G","AIC", "BIC", "SABIC", "entropy", "ICL", "ICL1", "ICL2", "%class"))
gt9x_weekly_data <- weekly_data %>%
filter(redcap_event_name != "") %>%
filter(redcap_event_name != 0)
##### Efficiency Mean
Eff_col <- c('record_id', 'redcap_event_name', 'Efficiency_Mean')
gt9x_eff <- gt9x_weekly_data[, Eff_col]
gt9x_Efficiency <- gt9x_eff
#
mlin <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency)
mbeta <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = 'beta', data = gt9x_Efficiency)
mspl <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = 'splines', data = gt9x_Efficiency)
mspl5 <- lcmm(Efficiency_Mean ~ redcap_event_name , random = ~ redcap_event_name, subject = "record_id", link = '5-quant-splines', data = gt9x_Efficiency)
summarytable(mlin, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC", "SABIC")) # LOWER THE BETTER
##### LCMM PACKAGE: Univaritate (LCMM)
# LINK: "linear" (linear transformation), "beta"(rescaled Beta CDF), "thresholds" (cumulative probit model), "splines"(I-splines)
# Quadratic
f_mspl1 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", ng = 1, data = gt9x_Efficiency)
f_mspl2 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 2, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl3 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 3, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl4 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 4, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl5 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 5, B = f_mspl1, mixture = ~ redcap_event_name)
# f_linear6 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "linear", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency_Mean, ng = 6, B = f_linear1, mixture = ~ redcap_event_name)
summarytable(mlin, mbeta, mspl, mspl5,which = c("loglik", "conv", "npm", "AIC", "SABIC")) # LOWER THE BETTER
f_mspl1 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", ng = 1, data = gt9x_Efficiency)
f_mspl2 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 2, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl3 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 3, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl4 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 4, B = f_mspl1, mixture = ~ redcap_event_name)
f_mspl5 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "splines", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency, ng = 5, B = f_mspl1, mixture = ~ redcap_event_name)
# f_linear6 <- lcmm(Efficiency_Mean ~ redcap_event_name , link = "linear", random = ~ redcap_event_name, subject = "record_id", data = gt9x_Efficiency_Mean, ng = 6, B = f_linear1, mixture = ~ redcap_event_name)
# Compare models; AIC/BIC/SABIC (smaller, better fitting),
# entropy (>0.8, well-separated class), ICL1/2 (lower, better balance between model fit)
summarytable(f_mspl1, f_mspl2, f_mspl3,  f_mspl4,  f_mspl5,
which = c("G","AIC", "BIC", "SABIC", "entropy", "ICL", "ICL1", "ICL2", "%class"))
table(gt9x_Efficiency$re)
table(gt9x_Efficiency$redcap_event_name)
gt9x_weekly_data <- weekly_data %>%
filter(redcap_event_name != "") %>%
filter(redcap_event_name != 0)
##### Efficiency Mean
Eff_col <- c('record_id', 'redcap_event_name', 'Efficiency_Mean')
gt9x_eff <- gt9x_weekly_data[, Eff_col]
gt9x_Efficiency <- gt9x_eff
table(gt9x_Efficiency$redcap_event_name)
gt9x_eff <- gt9x_weekly_data[, Eff_col] %>% filter(is.na(Efficiency_Mean))
gt9x_eff <- gt9x_weekly_data[, Eff_col] %>% filter(!is.na(Efficiency_Mean))
gt9x_Efficiency <- gt9x_eff
table(gt9x_Efficiency$redcap_event_name)
gt9x_Efficiency <- gt9x_weekly_data[, Eff_col] %>% filter(!is.na(Efficiency_Mean))
table(gt9x_Efficiency$redcap_event_name)
data_per_participant <- gt9x_weekly_data %>%
group_by(record_id) %>%
summarise(data_points = sum(!is.na(Efficiency_Mean))) %>%
arrange(desc(data_points))
data_per_participant
View(data_per_participant)
gt9x_Efficiency$record_id==62
gt9x_Efficiency[gt9x_Efficiency$record_id==62]
gt9x_Efficiency[gt9x_Efficiency$record_id==62,
gt9x_Efficiency[gt9x_Efficiency$record_id==62, ]
cc
gt9x_Efficiency[gt9x_Efficiency$record_id==62, ]
